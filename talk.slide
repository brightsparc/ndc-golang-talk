NDC Sydney: From C# to Go
My data science journey
14 Aug 2017
Tags: c#, golang, data science

Julian Bright
Data Scientist, SEEK
brightsparc@gmail.com
@brightsparc

* From C# to Go üéâ

* Agenda

My journey

- A bit about me
- My start in go at SEEK
- Code examples
- Testing and Deployment

Use Cases

- Data capture API - `segment.io` compatible
- Prediction API - `fasttext` model.

* Bit about me

I'm a Data Scientist, Engineer and Entrepreneur

Worked with .NET since 2001

- Avanade Canberra
- Microsoft UK
- BBC Worldwide UK
- Fairfax Sydney
- SEEK Melbourne

Moved into Data Science in 2013, after joining seek 2011

* SEEK July 2011

Infrastructure:

- Windows Servers (Hostworks Adelaide, and DR Equinox Sydney)

Typical tech stack

- .NET, C#, Javascript, MSSQL, MSMQ

* SEEK July 2017

Infrastructure:

- 80+ AWS accounts across 20 teams.

Polyglot tech stack

.image language_census.png

* SEEK May 2014

Take opportunity at SEEK Hackathon #2 to give Go a test drive.

[[https://www.youtube.com/embed/FQLbCjr-LP8][Full screen]]
.iframe https://www.youtube.com/embed/FQLbCjr-LP8 378 672

Won Ubergeek Award!
- ‚ÄúMost bleeding edge, technologically advanced and buzzword compliant innovation‚Äù

* Go history

Created in 2007 by Google team including Rob Pike & Ken Thomspon.

1. Memory safe, with c-like performance
2. Developer productivity (really fast compilation, easy to grok)
3. Native concurrency

.image gopher.png

Version 1.0 in 2012
Current [[https://blog.golang.org/go1.8][1.8]] in Feb 2017
Version [[https://dave.cheney.net/2016/10/25/introducing-go-2-0][2.0]] offers option for new breaking changes.

: Check out https://medium.com/statuscode/the-9-most-popular-golang-links-from-2016-c49287d99448

* C# vs Go

Same:

- Statically Typed, Namespaces/packages
- Managed runtime, Good standard library
- Small Compiled binary

Different:

- Simple types limited to structs and interfaces (no generics)
- Multiple return values, with explicit error handling
- Native concurrency with goroutines
- Testing over Debugging with first class benchmarking & performance tools

Go Mantra: ‚ÄúLess is more‚Äù

* Code Examples üö∏

* Code Examples

I will run through some example code for:

- IO
- JSON
- Interfaces
- Type assertion
- HTTP server
- Concurrency
- CGO
- Testing
- Profiling

* Example Code: Hello World

All go programs define package and main.

.play ndc_examples/00_hello.go

* Example Code: IO

Simple file IO example.

.code ndc_examples/01_file.go

: Multiple return values, explicit error handling, `defer` method.

* Example Code: JSON

Example file `talk.json`

.code ndc_predict/talk.json

: Nested structure

* Example Code: JSON

Define a struct with json annotations.

.code ndc_examples/02_json.go

* Example Code: Implicit Interfaces

A type implements an interface by implementing its methods.

: There is no explicit declaration of intent

.play ndc_examples/03a_interface.go

* Example Code: Interface and Type assertion

A type assertion provides access to an interface value's underlying concrete value.

.play ndc_examples/03b_interface.go

* Example Code: HTTP

Simple http server.

.code ndc_examples/04_http.go

: Using inline function definition for handler.

* Example Code: Concurrency

Channels can be blocking or buffered

.image channel.png

.caption https://www.slideshare.net/ssuser9ebf46/golang-101

* Example Code: Concurrency, blocking

Create, send and read from channel.

.play ndc_examples/05a_channel_blocking.go /^func main/,/^}/

: Make is used to create channels with an optional size.
: https://github.com/gophercon/2017-talks/blob/master/KavyaJoshi-UnderstandingChannels/Kavya%20Joshi%20-%20Understanding%20Channels.pdf

* Example Code: Concurrency, buffered

We can use select with a default clause to implement non-blocking sends.

.play ndc_examples/05b_channel_nonblocking.go /^func main/,/^}/

* Example Code: Concurrency, Timeout

Timeouts are important for programs that connect to external resources or that otherwise need to bound execution time.

.play ndc_examples/05c_channel_timeout.go /^func main/,/^}/

: The underscore is a blank indentifier, as complier requires you always use variables.

* Example Code: Concurrency, Fan out/in

Channels can operate as queues, collecting results back into an output channel.

.play ndc_examples/05d_channel_fanout.go

: The close function ends the range loop

* Example Code: Concurrency, Waitgroups

Wait groups are often used in combination with channels to create specific # of threads.

.play ndc_examples/08_waitgroup.go

* Example Code: CGO

If you want to play outside of the nicely managed sandbox you can to.

.image gophersengine.png

.caption https://cgogen.com/

* Example Code: CGO

Go can interoperate with native C code.

.play ndc_examples/09_cgo.go

* Example Code: Testing

Testing and benchmarking

.code ndc_examples/10_test.go

: Provide some clarity on number of times functions execute

* Example Code: Testing results

Benchmarking will happen in sequence after succesful tests.

    go test -v -bench=. -cpuprofile cpu.out 08_test.go
    === RUN   TestSucceed
    --- PASS: TestSucceed (0.00s)
    	08_test.go:6: Do something useful
    BenchmarkFib10-4   	 3000000	       445 ns/op
    PASS
    ok  	command-line-arguments	2.955s

: Output includes the number of # times method called, and timing per operation.

* Performance: Slowest calls

Use the go tool [[https://blog.golang.org/profiling-go-programs][pprof]] to load profile for compiled code or test.

    go tool pprof main.test cpu.out
    Entering interactive mode (type "help" for commands)
    (pprof) top5
    2.60s of 2.61s total (99.62%)
    Dropped 6 nodes (cum <= 0.01s)
    Showing top 5 nodes out of 12 (cum >= 2.56s)
          flat  flat%   sum%        cum   cum%
         2.55s 97.70% 97.70%      2.55s 97.70%  command-line-arguments.Fib
         0.03s  1.15% 98.85%      0.03s  1.15%  runtime.usleep
         0.02s  0.77% 99.62%      0.02s  0.77%  runtime.duffcopy
             0     0% 99.62%      2.55s 97.70%  command-line-arguments.BenchmarkFib10
             0     0% 99.62%      2.56s 98.08%  runtime.goexit

: CPU profiling samples 100 times per second.
: Memory profiling also supported

* Performance: Lines of code

You can also inspect the total time within methods

    (pprof) list Fib
    Total: 2.61s
    ROUTINE ======================== command-line-arguments.Fib in 08_test.go
         2.55s      3.75s (flat, cum)   100% of Total
         640ms      640ms      9:func Fib(n int) int {
         400ms      400ms     10:	if n < 2 {
         160ms      160ms     11:		return n
             .          .     12:	}
         1.35s      2.55s     13:	return Fib(n-1) + Fib(n-2)
             .          .     14:}

* Deployment

User [[https://docs.docker.com/engine/userguide/eng-image/multistage-build/][Multi-stage]] docker build to target linux binary within alpine linux small distribution.

.code ndc_segment/Dockerfile

: New in Docker 17.05, supports multi stage builds
: Ebay fabio is a good example that builds for multiple targets

* Development Environment

Code with [[https://atom.io/][Atom]] and [[https://atom.io/packages/go-plus][go-plus]] which includes

- Autocomplete using `gocode`
- Format your code with `gofmt`, `goimports`, or `goreturns`; optionally run one on save
- Run a variety of linters (e.g. golint, vet, etc.) against your code using gometalinter
- Go to definition using guru or godef

If you really need it, debugger support with [[https://github.com/derekparker/delve][Delve]]

Dependency management not standard, lots of [[https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison][options]]

- [[https://github.com/kardianos/govendor][govendor]]
- [[https://github.com/Masterminds/glide][glide]]
- [[https://github.com/tools/godep][godep]]

* Demonstration üíØ

* Demonstration

I will run through some [[https://github.com/brightsparc/ndc-golang-talk/][example code]]

- Data capture API - `segment.io` compatible
- Prediction API - `fasttext` model.

* Visualisation

It's possible to create some really interesting patterns, and even visualise them.

.image http://divan.github.io/demos/gifs/timers.gif
.caption [[http://divan.github.io/posts/go_concurrency_visualize][Visualizing Concurrency in Go]]

* Questions

.image give_feedback.png 400 400

.caption [[https://m.me/givefeedback?ref=2tCf4aH][Scan me to give feedback]]

: Ask the question, scan

* Agenda

List of topics to cover

- why go (performance, good std lib, good community)
- language overview some difference (structs, interface, switch)
- patterns (concurrency, fan-in/out)
- development environment & tooling (unit testing, benchmarks, atom ide)
- build and deployment (single binary, docker, prometheus)
- aws integration (apex, xray)
- interesting libraries & projects (gob, grpc, dgraph, grumpy)
- my use cases (batch processing, scoring & inference)
- tips & tricks (data structures, slices and pointers, memory management)

* Interesting libraries & projects

Following is a short list of some interesting projects.

- [[https://golang.org/pkg/encoding/gob/][gob]] - the standard library for efficient binary encoding.
- [[https://github.com/grpc/grpc-go][grpc]] - the Go implementation of gRPC HTTP/2 based RPC.
- [[https://github.com/simeji/jid][jid]] - drill down JSON interactively using filtering like jq.
- [[https://github.com/apex/apex][apex]] - build deploy and manage AWS lambda functions with Go.
- [[https://github.com/prometheus/prometheus][prometheus]] - the Prometheus monitoring system and time series database.
- [[https://github.com/adrianco/spigo][spigo]] - simulate protocol interactions in Go by Adrian Cockcroft.
- [[https://github.com/google/grumpy][grumpy]] - a Python to Go source code transcompiler.
- [[https://github.com/boltdb/bolt][boltdb]] - an embedded key/value database for Go.
- [[https://docs.dgraph.io/v0.7.7][dgraph]] - an open source distributed graph database.
